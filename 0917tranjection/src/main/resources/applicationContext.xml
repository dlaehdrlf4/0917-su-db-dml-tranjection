<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

<!-- 데이터베이스 접속 정보를 갖는 DataSource -->
<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		id="dataSource">
		<property value="oracle.jdbc.driver.OracleDriver" name="driverClassName" />
		<property value="jdbc:oracle:thin:@192.168.10.101:1521:xe"
			name="url" />
		<property value="user25" name="username" />
		<property value="user25" name="password" />
	</bean>
	
	<!--   MyBatis 환경 설정 정보를 갖는 SqlSessionFactoryBean -->
<!-- 어노테이션을 이용하는 MyBatis SqlSessionFactoryBean -->
<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
	<property name="dataSource" ref="dataSource" />
</bean>

	
	<!-- 아래 2개의 속성은 생략 될 수 있습니다.
	잘못 설정된 경우 java.io.FileNotFoundException이 실행됩니다. 
	<property value="classpath:/mybatis/mybatis-config.xml" name="configLocation" />
	<property value="classpath:/mybatis/mappers/personmapper.xml" name="mapperLocations" />
	</bean>-->
	
<!-- 매퍼 인터페이스를 이용하는 Dao 객체를 만들어주는 bean -->
<!-- 클래스의 객체를 만들어준다. -->
<bean id="deptMapper"  class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="dao.DeptMapper" />
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>

	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession"
	destroy-method="clearCache">
	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>

<context:annotation-config />
<context:component-scan base-package="service"/>
<!-- service객체 안만들기 위해서 써준거다.? -->

<!--  트랜잭션 적용을 위한 bean 만들기 -->
<bean id = "transactionManager"
class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
<property name = "dataSource" ref="dataSource"/>
</bean>

<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
